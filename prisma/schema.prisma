// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

enum Languages {
  VI
  EN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  plan       Plan    @default(free)
  dateOfBirth DateTime?
  academicLevel    String?
  learningGoals String?
  subjects      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  twoFactorConfirmation TwoFactorConfirmation?
  accounts      Account[]
  settings      UserSettings?
  subscription Subscription?
  chats Chat[]
  messsages     Message[]
  mails     Mail[]
}

model UserSettings {
  id            String    @id @default(cuid())
  userId        String    
  preferredLang Languages @default(VI)
  isTwoFactorEnabled    Boolean             @default(false)

  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Chat {
  id        String   @id
  title String

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([id])
}

model Message {
  id             String        @id
  content        String
  image          String?
  role           String
  chatId String
  userId         String

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Mail {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String
  content   String
  createdAt DateTime  @default(now())
  userId    String
  isRead    Boolean   @default(false)
  isTrashed   Boolean   @default(false)
  isArchived  Boolean   @default(false) 
  
  tags      String[] @default(["general"])
  user      User?      @relation(fields: [userId], references: [id])
}

enum Plan {
  free
  pro
  premium
}

enum SubscriptionPeriod {
  monthly
  yearly
}

model Subscription {
  id            String    @id @default(cuid())
  userId String             @unique
  plan   Plan
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}